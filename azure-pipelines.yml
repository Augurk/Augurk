# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/vsts/pipelines/apps/windows/dot-net

# Build ASP.NET Core project using Azure Pipelines
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core?view=vsts
variables:
  buildConfiguration: 'Release'

jobs:
- job: netcore
  displayName: .NET Core Framework Dependent
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 3.1.201'
    inputs:
      version: 3.1.201

  - task: GitVersion@5
    displayName: Set version

  - task: DotNetCoreCLI@2
    inputs:
      command: restore
      projects: src/Augurk.sln
      workingDirectory: 'src'
    displayName: dotnet restore

  - task: DotNetCoreCLI@2
    inputs:
      command: build
      workingDirectory: 'src'
      configuration: $(buildConfiguration)
      arguments: '/p:Version=$(GitVersion.MajorMinorPatch) /p:InformationalVersion=$(GitVersion.InformationalVersion)'
    displayName: dotnet build

  - task: DotNetCoreCLI@2
    inputs:
      command: test
      workingDirectory: 'src'
      configuration: $(buildConfiguration)
    displayName: dotnet test

  - task: DownloadSecureFile@1
    inputs:
      secureFile: license.json
    displayName: Download RavenDB license

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Agent.TempDirectory)
      contents: "license.json"
      targetFolder: $(Build.SourcesDirectory)/src/Augurk
    displayName: Copy license.json

  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      publishWebProjects: True
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(GitVersion.MajorMinorPatch) /p:InformationalVersion=$(GitVersion.InformationalVersion)'
      zipAfterPublish: true
    displayName: dotnet publish

  - task: PublishBuildArtifacts@1

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/src/Augurk.Specifications
      contents: "**/?(*.feature|*.md)"
      targetFolder: $(Build.ArtifactStagingDirectory)/features

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)/features
      artifactName: features

- job: docker
  displayName: Docker Image
  variables:
    imageName: augurk/augurk
  pool:
    vmImage: ubuntu-16.04
  steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 3.1.201'
      inputs:
        version: 3.1.201
    - task: GitVersion@5
      displayName: Set version
    - script: |
        echo '##vso[task.setvariable variable=prerelease]-preview'
      displayName: Set prerelease tag
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - script: |
        echo '##vso[task.setvariable variable=prerelease]'
      displayName: Set empty prerelease tag
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: DownloadSecureFile@1
      inputs:
        secureFile: license.json
      displayName: Download RavenDB license

    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: "license.json"
        targetFolder: $(Build.SourcesDirectory)/src/Augurk
      displayName: Copy license.json

    - task: Docker@1
      displayName: 'Build unit test image'
      inputs:
        command: Build an image
        imageName: '$(imageName):unit-tests'
        arguments: '--pull --target unit-tests --build-arg Version=$(GitVersion.MajorMinorPatch) --build-arg InformationalVersion=$(GitVersion.InformationalVersion)'
    - task: Docker@1
      displayName: 'Run unit tests'
      inputs:
        command: Run an image
        imageName: '$(imageName):unit-tests'
        runInBackground: false
        volumes:
          '$(Build.ArtifactStagingDirectory):/app/Augurk.Test/TestResults/'

    - task: Docker@1
      displayName:  'Build integration test image'
      inputs:
        command: Build an image
        imageName: '$(imageName):integration-tests'
        arguments: '--pull --target integration-tests --build-arg Version=$(GitVersion.MajorMinorPatch) --build-arg InformationalVersion=$(GitVersion.InformationalVersion)'
    - task: Docker@1
      displayName: 'Run integration tests'
      inputs:
        command: Run an image
        imageName: '$(imageName):integration-tests'
        runInBackground: false
        volumes:
          '$(Build.ArtifactStagingDirectory):/app/Augurk.IntegrationTest/TestResults/'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        buildConfiguration: $(BuildConfiguration)
        buildPlatform: 'Docker'
        testResultsFormat: VSTest
        testResultsFiles: '**/*.trx'
        searchFolder: '$(Build.ArtifactStagingDirectory)'
        failTaskOnFailedTests: true

    - task: Docker@1
      displayName: 'Build runtime image'
      inputs:
        command: Build an image
        imageName: '$(imageName):$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)$(prerelease)'
        arguments: '--pull --build-arg Version=$(GitVersion.MajorMinorPatch) --build-arg InformationalVersion=$(GitVersion.InformationalVersion)'
        includeLatestTag: true
    - task: Docker@1
      displayName: 'Push runtime image (tagged)'
      inputs:
        command: Push an image
        imageName: '$(imageName):$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)$(prerelease)'
        containerregistrytype: Container Registry
        dockerRegistryEndpoint: 'Docker Hub'
    - task: Docker@1
      displayName: 'Push runtime image (latest)'
      inputs:
        command: Push an image
        imageName: '$(imageName):latest'
        containerregistrytype: Container Registry
        dockerRegistryEndpoint: 'Docker Hub'
