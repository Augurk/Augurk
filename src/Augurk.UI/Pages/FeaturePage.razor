<!--
 Copyright 2021, Augurk

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
@page "/feature/{product}/{group}/{featureTitle}/{version?}"
@inject FeatureService FeatureService

<div class="container-fluid">
    <TagDisplay Tags="@CurrentFeature?.Tags" />
    <Row>
        <h3>@CurrentFeature?.Title</h3>
    </Row>
    @if (FeatureIsNotImplemented)
    {
        <Row>
            <Card Color="Color.Warning">
                <CardHeader><i class="bi-exclamation-square-fill text-warning">&nbsp;</i>Not Implemented</CardHeader>
                <CardBody>This feature has not (yet) been implemented, it is only shown here for reference-purposes.</CardBody>
            </Card>
        </Row>
    }
    @if (!FeatureIsNotImplemented && FeatureIsIgnored)
    {
        <Row>
            <Card Color="Color.Danger">
                <CardHeader><i class="bi-exclamation-triangle-fill text-danger">&nbsp;</i>Ignore</CardHeader>
                <CardBody>This feature has been marked with an ignore-tag so it is ignored by the test-engine. As a result this feature has not been validated against the implementation!</CardBody>
            </Card>
        </Row>
    }
    <div class="description">
        <Markdown Input="@CurrentFeature?.Description" />
    </div>
    @if (CurrentFeature != null)
    {
        <Row ItemsPerRow="ItemsPerRow.One">
            @foreach (var scenario in @CurrentFeature?.Scenarios)
            {
                <ScenarioDisplay Scenario="@scenario" />
            }
        </Row>
    }
</div>

@code {
    [Parameter]
    public string Product { get; set; }

    [Parameter]
    public string Group { get; set; }

    [Parameter]
    public string FeatureTitle { get; set; }

    [Parameter]
    public string Version { get; set; }

    private DisplayableFeature CurrentFeature { get; set; }
    private bool FeatureIsNotImplemented { get; set; }
    private bool FeatureIsIgnored { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentFeature = await FeatureService.GetFeatureAsync(Product, Group, FeatureTitle, Version);
        FeatureIsNotImplemented = CurrentFeature.Properties.HasFlag(FeatureProperties.NotImplemented);
        FeatureIsIgnored = CurrentFeature.Properties.HasFlag(FeatureProperties.Ignore);
    }
}
