<!--
 * Copyright (c) Augurk. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0.
-->

@page "/feature/{product}/{group}/{featureTitle}/{version?}"
@inject FeatureService FeatureService

<div class="container-fluid">
    <div style="margin-bottom: -20px">
        <TagDisplay Tags="@CurrentFeature?.Tags" />
    </div>
    <div class="sticky-top" style="padding-top:10px">
        <Row ItemsPerRow="ItemsPerRow.Two">
            <h3>@CurrentFeature?.Title</h3>
            <span class="float-right">
                <Switch OnText="Uncollapse All" OffText="Collapse All" @bind-Value=CollapseAllScenarios />
            </span>
        </Row>
    </div>
    @if (FeatureIsNotImplemented)
    {
        <Row>
            <Card Color="Color.Warning">
                <CardHeader><i class="bi-exclamation-square-fill text-warning">&nbsp;</i>Not Implemented</CardHeader>
                <CardBody>This feature has not (yet) been implemented, it is only shown here for reference-purposes.</CardBody>
            </Card>
        </Row>
    }
    @if (!FeatureIsNotImplemented && FeatureIsIgnored)
    {
        <Row>
            <Card Color="Color.Danger">
                <CardHeader><i class="bi-exclamation-triangle-fill text-danger">&nbsp;</i>Ignore</CardHeader>
                <CardBody>This feature has been marked with an ignore-tag so it is ignored by the test-engine. As a result this feature has not been validated against the implementation!</CardBody>
            </Card>
        </Row>
    }
    <div class="description">
        <Markdown Input="@CurrentFeature?.Description" LinkHandler="@HandleLink" />
    </div>
    @if (CurrentFeature != null)
    {
        <Row ItemsPerRow="ItemsPerRow.One">
            <CascadingValue Value="CollapseAllScenarios">
                @foreach (var scenario in @CurrentFeature?.Scenarios)
                {
                    <ScenarioDisplay Scenario="@scenario" />
                }
            </CascadingValue>
        </Row>
    }
</div>

@code {
    [Parameter]
    public string Product { get; set; }

    [Parameter]
    public string Group { get; set; }

    [Parameter]
    public string FeatureTitle { get; set; }

    [Parameter]
    public string Version { get; set; }

    private DisplayableFeature CurrentFeature { get; set; }
    private bool FeatureIsNotImplemented { get; set; }
    private bool FeatureIsIgnored { get; set; }
    private bool CollapseAllScenarios { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentFeature = await FeatureService.GetFeatureAsync(Product, Group, FeatureTitle, Version);
        FeatureIsNotImplemented = CurrentFeature.Properties.HasFlag(FeatureProperties.NotImplemented);
        FeatureIsIgnored = CurrentFeature.Properties.HasFlag(FeatureProperties.Ignore);
    }

    private string HandleLink(string linkText){
        return $"feature/{Product}/{Group}/{linkText}/{Version}";
    }
}
