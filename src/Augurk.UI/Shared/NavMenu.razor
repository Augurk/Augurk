<!--
 * Copyright (c) Augurk. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0.
-->

@inject Augurk.UI.Services.AugurkService AugurkService
@inject ContextService ContextService
@inject ProductService ProductService

<div class="top-row pl-4 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Augurk</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass d-flex flex-column nav-sidebar top" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </li>
        @if(ContextService.CurrentProduct != null)
        {
        <li class="nav-item px-3">
            <NavLink class="nav-link" href=@($"product/{ContextService.CurrentProduct.Name}/") Match="NavLinkMatch.All">
                <span class="oi oi-box" aria-hidden="true"></span>@ContextService.CurrentProduct.DisplayName
            </NavLink>
        </li>
        }
        @foreach(var group in Groups ?? Enumerable.Empty<Group>())
        {
            @foreach(var feature in group.Features?? Enumerable.Empty<FeatureDescription>())
            {
        <li class="nav-item px-3">
            <NavLink class="nav-link" href=@($"/feature/{ContextService.CurrentProduct.Name}/{group.Name}/{feature.Title}/{feature.LatestVersion}/") @onclick="() => {MostRecentOpened = feature;}" Match="NavLinkMatch.All">
                @if(feature.ChildFeatures != null && feature.ChildFeatures.Any())
                {
                <span class="oi oi-folder" aria-hidden="true"></span>
                }
                else{
                <span class="oi oi-document" aria-hidden="true"></span>
                }
                <span>@feature.Title</span>
            </NavLink>
        </li>
                @if(feature.ChildFeatures != null && feature.ChildFeatures.Any() && feature == MostRecentOpened)
                {
                    @foreach(var childFeature in feature.ChildFeatures)
                    {
        <li class="nav-item child px-3">
            <NavLink class="nav-link" href=@($"/feature/{ContextService.CurrentProduct.Name}/{group.Name}/{childFeature.Title}/{childFeature.LatestVersion}/") Match="NavLinkMatch.All">
                <span class="oi oi-document" aria-hidden="true"></span>
                <span>@childFeature.Title</span>
            </NavLink>
        </li>
                    }
                }
            }
        }
    </ul>

</div>
<div class="@NavMenuCssClass d-flex flex-column nav-sidebar bottom" @onclick="ToggleNavMenu">
    <ul class="nav flex-column mt-auto">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/configure" Match="NavLinkMatch.All">
                <span class="oi oi-cog" aria-hidden="true"></span> Configure
            </NavLink>
            <NavLink class="nav-link" href="/about" Match="NavLinkMatch.All">
                <span class="oi oi-info" aria-hidden="true"></span> About
            </NavLink>
        </li>
    </ul>
    <Badge Color="Color.Success">Version: @Version</Badge>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string Version;

    private IEnumerable<Group> Groups;

    private FeatureDescription MostRecentOpened;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        ContextService.OnProductChanged += OnCurrentProductChanged;
        Version = await AugurkService.GetVersionAsync();
    }

    private async Task OnCurrentProductChanged(Product product)
    {
        if(product != null)
        {
            Groups = await ProductService.GetGroupsAsync(product.Name);
        }
        else
        {
            Groups = null;
        }
        StateHasChanged();
    }
}
