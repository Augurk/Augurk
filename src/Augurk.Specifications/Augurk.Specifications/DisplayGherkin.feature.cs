// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Augurk.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DisplayGherkinScenariosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DisplayGherkin.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Display Gherkin Scenarios", "Augurk supports the full extend of Gherkin. However, ocasionally Gherkin scenario" +
                    "s can be somewhat overwelming.\r\nIn order to improve the readablity of those scen" +
                    "arios, some additional UI options are provided.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Display Gherkin Scenarios")))
            {
                Augurk.Specifications.DisplayGherkinScenariosFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Scenario with a large data table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Display Gherkin Scenarios")]
        public virtual void ScenarioWithALargeDataTable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scenario with a large data table", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language Culture Name",
                        "Display Name",
                        "Culture Code"});
            table1.AddRow(new string[] {
                        "af-ZA",
                        "Afrikaans - South Africa",
                        "0x0436"});
            table1.AddRow(new string[] {
                        "zh-CN",
                        "Chinese - China",
                        "0x0804"});
            table1.AddRow(new string[] {
                        "zh-HK",
                        "Chinese - Hong Kong SAR",
                        "0x0C04"});
            table1.AddRow(new string[] {
                        "cs-CZ",
                        "Czech - Czech Republic",
                        "0x0405"});
            table1.AddRow(new string[] {
                        "da-DK",
                        "Danish - Denmark",
                        "0x0406"});
            table1.AddRow(new string[] {
                        "nl-BE",
                        "Dutch - Belgium",
                        "0x0813"});
            table1.AddRow(new string[] {
                        "nl-NL",
                        "Dutch - The Netherlands",
                        "0x0413"});
            table1.AddRow(new string[] {
                        "en-AU",
                        "English - Australia",
                        "0x0C09"});
            table1.AddRow(new string[] {
                        "en-CA",
                        "English - Canada",
                        "0x1009"});
            table1.AddRow(new string[] {
                        "en-IE",
                        "English - Ireland",
                        "0x1809"});
            table1.AddRow(new string[] {
                        "en-ZA",
                        "English - South Africa",
                        "0x1C09"});
            table1.AddRow(new string[] {
                        "en-GB",
                        "English - United Kingdom",
                        "0x0809"});
            table1.AddRow(new string[] {
                        "en-US",
                        "English - United States",
                        "0x0409"});
            table1.AddRow(new string[] {
                        "et-EE",
                        "Estonian - Estonia",
                        "0x0425"});
            table1.AddRow(new string[] {
                        "fo-FO",
                        "Faroese - Faroe Islands",
                        "0x0438"});
            table1.AddRow(new string[] {
                        "fa-IR",
                        "Farsi - Iran",
                        "0x0429"});
            table1.AddRow(new string[] {
                        "fi-FI",
                        "Finnish - Finland",
                        "0x040B"});
            table1.AddRow(new string[] {
                        "fr-BE",
                        "French - Belgium",
                        "0x080C"});
            table1.AddRow(new string[] {
                        "fr-CA",
                        "French - Canada",
                        "0x0C0C"});
            table1.AddRow(new string[] {
                        "fr-FR",
                        "French - France",
                        "0x040C"});
            table1.AddRow(new string[] {
                        "fr-LU",
                        "French - Luxembourg",
                        "0x140C"});
            table1.AddRow(new string[] {
                        "fr-MC",
                        "French - Monaco",
                        "0x180C"});
            table1.AddRow(new string[] {
                        "fr-CH",
                        "French - Switzerland",
                        "0x100C"});
            table1.AddRow(new string[] {
                        "de-AT",
                        "German - Austria",
                        "0x0C07"});
            table1.AddRow(new string[] {
                        "de-DE",
                        "German - Germany",
                        "0x0407"});
            table1.AddRow(new string[] {
                        "de-LI",
                        "German - Liechtenstein",
                        "0x1407"});
            table1.AddRow(new string[] {
                        "de-LU",
                        "German - Luxembourg",
                        "0x1007"});
            table1.AddRow(new string[] {
                        "de-CH",
                        "German - Switzerland",
                        "0x0807"});
#line 8
 testRunner.Given("this scenario has a large data table", ((string)(null)), table1, "Given ");
#line 38
 testRunner.When("I click the header of the table in the given step", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("the table in the given step is collapsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ReadableScenarioOutlines(string description, string expectation, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Readable Scenario Outlines", exampleTags);
#line 41
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given("this scenario outline contains multiple examples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.When(string.Format("I click in the example described as \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("the placeholder above is updated with the value of the description column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.And(string.Format("{0}", expectation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Readable Scenario Outlines")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Display Gherkin Scenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Click me!")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "Click me!")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:expectation", "\'Click me!\' is shown in the When step")]
        public virtual void ReadableScenarioOutlines_ClickMe()
        {
            this.ReadableScenarioOutlines("Click me!", "\'Click me!\' is shown in the When step", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Readable Scenario Outlines")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Display Gherkin Scenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Or me!")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:description", "Or me!")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:expectation", "\'Or me!\' is shown in the When step")]
        public virtual void ReadableScenarioOutlines_OrMe()
        {
            this.ReadableScenarioOutlines("Or me!", "\'Or me!\' is shown in the When step", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
